var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"\ud83c\udfe1 Home","text":""},{"location":"template.html","title":"Template","text":"<p>\ud83c\udfe1 Home &gt; Link 1 &gt; Link 2 &gt; Link 3 &gt; Link 4</p>","tags":["tag-demo"]},{"location":"template.html#icon-title","title":"\ud83d\udcda Icon &amp; title","text":"","tags":["tag-demo"]},{"location":"template.html#a-paragraph","title":"A paragraph","text":"<p>Some text here.</p>","tags":["tag-demo"]},{"location":"template.html#another-inside","title":"Another inside","text":"<p>Some text here.</p>","tags":["tag-demo"]},{"location":"template.html#troubleshooting","title":"\ud83d\udc1e Troubleshooting","text":"<p>Some troubleshooting here.</p>","tags":["tag-demo"]},{"location":"template.html#related-articles","title":"\ud83d\udcd1 Related articles","text":"<ul> <li>A related article</li> <li>Another related article</li> </ul>","tags":["tag-demo"]},{"location":"template.html#sources","title":"\ud83d\udcda\ufe0f Sources","text":"<ul> <li>A source</li> <li>Another source</li> </ul>","tags":["tag-demo"]},{"location":"learning/index.html","title":"\ud83e\uddd1\u200d\ud83c\udf93 Learning","text":"<p>\ud83c\udfe1 Home &gt; Learning</p>"},{"location":"learning/index.html#learning","title":"Learning","text":""},{"location":"learning/index.html#reactjs","title":"\u269b\ufe0f ReactJS","text":"<p>ReactJS cheatsheet</p> <p>\ud83c\uddeb\ud83c\uddf7 La m\u00e9mo\u00efsation React UseMemp examples</p>"},{"location":"learning/index.html#nestjs","title":"\ud83e\udeba NestJS","text":"<p>NestJS cheatsheet</p>"},{"location":"learning/index.html#google-cloud-provider","title":"\u2601\ufe0f Google Cloud Provider","text":"<ul> <li>App Engine</li> <li>GCloud</li> </ul>"},{"location":"learning/index.html#rest-apis","title":"\ud83d\udc1dREST APIs","text":"<p>Rest APIs</p>"},{"location":"learning/index.html#micro-services","title":"\ud83c\udfa4 Micro-Services","text":"<p>Design patterns</p>"},{"location":"learning/index.html#ui","title":"\ud83e\udd78 UI","text":"<p>16 design rules How to handle required &amp; optional fields in forms</p>"},{"location":"learning/index.html#localization","title":"\ud83e\udd0c Localization","text":"<p>i18n best practices</p>"},{"location":"learning/index.html#sass-bem","title":"\ud83d\udd8c\ufe0f SASS &amp; BEM","text":"<ul> <li>Sass &amp; BEM scope control</li> </ul>"},{"location":"learning/index.html#cypress","title":"\ud83c\udf33Cypress","text":"<ul> <li>Cypress course notes</li> </ul>"},{"location":"learning/app-engine.gcp.html","title":"App engine.gcp","text":"<p>\ud83c\udfe1 Home &gt; Learning &gt; GCP</p>","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#google-cloud-platform-app-engine","title":"\u2601\ufe0f Google Cloud Platform - App Engine","text":"","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#lexicon","title":"\ud83e\udd13 Lexicon","text":"<ul> <li>On-demand resource provisioning / Elasticity : only rent resources when you need them and release them when you don't.</li> <li>Spot VMs (formerly known as Preemptible instances): short-lived compute instances. Very cheap, can be stopped anytime by GCP in a 30 seconds warning. Used for asynchronous tasks that are fault tolerant. </li> </ul>","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#compute-engines-gce","title":"\u23ef\ufe0f Compute engines (GCE)","text":"<p>URL</p> <p>Service used to provision &amp; manage virtual machines withing the GCP environment:</p> <ul> <li>Create and manage lifecycle of VM instances.</li> <li>Load balancing &amp; auto scaling.</li> <li>Attach storage to VM.</li> <li>Manage network connectivity &amp; configuration.</li> </ul> <p>Whenever a virtual machine is created, GCE also creates a hard disc to run the VM on. The disk will have the same name than the instance.</p>","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#vm-families","title":"VM families","text":"<ul> <li>General purpose (E2, N2, N2D, N1) : apps &amp; servers, small to medium db, dev environments.</li> <li>Memory Optimized (M2, M1) : ultra-high memory workloads (analytics, large db).</li> <li>Compute Optimized (C2) : compute intensive workloads (gaming).</li> </ul> <p>Machine name: follows the pattern family-workload-nb_of_cores.</p> <p>Example: E2-standard-2 : E2 family, standard workload with 2 cores.</p>","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#custom-machine-types","title":"Custom machine types","text":"<ul> <li>Available when creating a new VM by selecting \"custom\" in the machine type select list. </li> <li>Only available for E2, N2 or N1 machine types.</li> <li>Support multiple OS.</li> <li>Billed by vCPUs &amp; memory provisioned per instance instance.</li> </ul>","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#how-to-automatically-set-up-your-vm","title":"How to automatically set-up your VM ?","text":"","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#bootstrapping","title":"Bootstrapping","text":"<p>Use a startup script to execute when a VM is launched, you can configure it in the Automation section of the VM configuration. It will expect bash.</p>","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#instance-template","title":"Instance template","text":"<ul> <li>Use an instance template in which you can define:<ul> <li>The machine type.</li> <li>The image, or an image family which will use the latest non deprecated image in this family (example debian-9).</li> <li>Its labels.</li> <li>A startup script.</li> <li>Many other properties.</li> </ul> </li> <li>They are used to create VM instances &amp; managed instance groups.</li> <li>They cannot be updated, you will need to duplicate it in order to update it.</li> <li>They are unaware of regions or zones, it's just a template.</li> <li>They can be overrided when used in an instance creation, they act as a setting of default values.</li> </ul> <p>In order to create an instance template :  <code>Compute Engine &gt; Instance templates &gt; Create</code>.</p>","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#custom-image","title":"Custom image","text":"<p>Problem: installing OS patches, softwares at launch of VM instances increases boot up time. Solution: create a custom image where all of these are already installed &amp; use it in our template.</p> <ul> <li>They can be created from an instance that's already running (that's called hardening an image), a persistent disk, a snapshot, another image or a file in Cloud Storage.</li> <li>They can be shared across projects.</li> <li>An image can be marked as deprecated and a replacement image can be suggested.</li> </ul>","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#how-to-harden-an-image","title":"How to harden an image ?","text":"<ul> <li>Go to <code>GCE &gt; Disks</code> &amp; find the disk associated to your instance (remember, it has the same name). Click the ... menu &amp; select \"Create image\".</li> </ul> <p>\u203c\ufe0f When you harden an image, you have to make sure that you choose the correct location. It can either be multi-regional, or confined to a specific region (which means you won't be able to create instances in another region with this custom image).</p> <p>You should never create an image from a running instance, it should always be stopped before. Google will remind you of it if you're trying to do it anyway.</p> <p>All your images are stored in <code>GCE &gt; Storage &gt; Images</code>. From there, you can : - Create an instance directly from this image (but you'll need to redefine everything you could already have defined in a template). - Duplicate an existing template, specify the boot disk &amp; select your custom image. In this case, you'll get all your customization &amp; your custom-image.</p>","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#about-gpus","title":"\ud83d\udd79\ufe0f About GPUs","text":"<ul> <li>In order to accelerate math &amp; graphic intensive workloads.</li> <li>Higher cost (no shit Sherlock \ud83d\udd75\ufe0f)</li> <li>Make sure to use images that include GPU libraries</li> <li>Restrictions:<ul> <li>Not supported on all machine types</li> <li>Live migrations not available</li> </ul> </li> </ul>","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#best-practices","title":"\ud83e\udd13 Best practices","text":"<ul> <li>Choose the right zone &amp; regions (according to user location, cost, regulations...).</li> <li>Choose the right machine types for your needs.</li> <li>Use labels to indicate env, team, business unit, ...</li> </ul>","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#troubleshooting-with-apache-on-a-gcp-vm","title":"\ud83d\udc1e Troubleshooting with Apache on a GCP VM","text":"<p>URL</p> <p>This is very specific, just watch the video.</p>","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#managing-costs","title":"\ud83d\udcb8 Managing costs","text":"<p>URL</p> <p>This is very specific too, just go the dedicated section.</p>","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#live-migrations","title":"Live migrations","text":"<ul> <li>They keep your VMs up &amp; running when a host needs to be updated (software or hardware).</li> <li>Not available for GPU instances or Spot VMs.</li> <li>They need to be configured in the availability policy while creating an instance:<ul> <li>What happens on host maintenance ? Migrate or terminate ?</li> <li>Should your instance be automatically restarted if they are terminated by anything else but user action.</li> </ul> </li> </ul>","tags":["gcp","engine","app-engine"]},{"location":"learning/app-engine.gcp.html#sources","title":"\ud83d\udcda\ufe0f Sources","text":"<ul> <li>Udemy GCP course</li> </ul>","tags":["gcp","engine","app-engine"]},{"location":"learning/cypress.html","title":"Cypress","text":"<p>\ud83c\udfe1 Home &gt; Learning &gt; \ud83c\udf33 Cypress</p>","tags":["cypress","tests"]},{"location":"learning/cypress.html#cypress","title":"\ud83c\udf33 Cypress","text":"","tags":["cypress","tests"]},{"location":"learning/cypress.html#fundamental-basics","title":"Fundamental &amp; basics","text":"","tags":["cypress","tests"]},{"location":"learning/cypress.html#use-cypress","title":"Use cypress","text":"<ul> <li><code>npx cypress open</code>: to run it from a browser.</li> <li><code>npx cypress run</code>: to run it from CLI.</li> </ul>","tags":["cypress","tests"]},{"location":"learning/cypress.html#implicit-explicit-assertions","title":"Implicit &amp; explicit assertions","text":"<p>Some commands in Cypress (such as <code>visit()</code> or <code>contains()</code>) have implicit expectations, which means that we expect them to succeed before going to the next command. If the <code>visit()</code> command fails because there's a typo in the url, the test will fail and won't go any further.</p> <p>Explicit expectations are the one we explicitely check (such as <code>should('exist')</code> for example).</p>","tags":["cypress","tests"]},{"location":"learning/cypress.html#get-vs-find","title":"<code>get()</code> vs <code>find()</code>","text":"<p>Let's say we have this code (and forget about all the good practices it doesn't implement, it's for the example's sake): </p> <pre><code>&lt;section id=\"products\"&gt;\n    &lt;img src=\"./product-banner.png\" alt=\"Our products\" /&gt;\n    ...\n&lt;/section&gt;\n</code></pre> <p>We want to make sure that the img banner inside our section is indeed visible:</p> <pre><code>// This code is the most simple, it will work\ncy.get('section#products &gt; img').should('be.visible');\n\n// This code will work too : find will \"look inside\" the elements we got with the get() method\ncy.get('section#products').find('img').should('be.visible');\n\n// This code will not seem like it, but it won't work the way we intend to: the second get() will not look \"inside\" the element we got in the first get(), but inside the DOM in general\n// This code will actually look in the DOM for the section, then look in the DOM for the img. Both calls are not related.\ncy.get('section#products').get('img').should('be.visible');\n</code></pre>","tags":["cypress","tests"]},{"location":"learning/cypress.html#the-4-seconds-rule","title":"The 4 seconds rule","text":"<p>There is a secret rule that is applied every time you make an assertion in Cypress : the 4 seconds rule. Basically, it means that if Cypress did not manage to do what you asked in the fiest place, it will retry for 4 seconds. If it manages to do it during this time, the assertion will pass. If not, an error mentionning a timeout will be displayed.</p> <p>It applies to any assertion, even the simplest ones like <code>cy.get('section#products')</code>.</p>","tags":["cypress","tests"]},{"location":"learning/cypress.html#then-should","title":"<code>then</code> &amp; <code>should</code>","text":"<p>There are 2 alternative ways of writing this code:  <pre><code>// Classical syntax\ncy.get('section#products').should('have.attr', 'class').and('match', /invalid/);\n\n// Alternative #1\ncy.get('section#products').should(($section) =&gt; {\n  expect($section).attr('class').to.contain('invalid');\n});\n\n// Alternative #2\ncy.get('section#products').then(($section) =&gt; {\n  expect($section).attr('class').to.contain('invalid');\n});\n</code></pre></p> <p>In both alternatives, the <code>$section</code> argument is no longer a Cypress object, but a HTML element. This means you must interact with it in a more classical test writing syntax, you can't use Cypress methods anymore. This can be useful if you need to override the 4 seconds rule.</p> <p>Both syntaxes are equivalent, but prefer <code>should</code> to <code>then</code> since it seems to behave more consistently.</p>","tags":["cypress","tests"]},{"location":"learning/cypress.html#chaining-changing-subject","title":"Chaining &amp; changing subject","text":"<p>Take the following code:</p> <pre><code>cy.get('section#products').should('have.attr', 'class').and('match', /invalid/);\n</code></pre> <p>Sometimes (but not always), when chaining multiple methods, the subject on which the next method applies is different than the one we started with. It depends on the method and is usually quite logic.</p> <p>In our example, we first work with the section that was retrieved. Then we check its class. The <code>and</code> method is then applied to the class, not to the section we were using before.</p>","tags":["cypress","tests"]},{"location":"learning/cypress.html#tests-hooks","title":"Tests hooks","text":"<p>There are 4 tests hooks to remember : </p> <ul> <li><code>before</code>: any code in there will be executed once, before running the first test.</li> <li><code>beforeAll</code>: any code in there will be executed before every test.</li> <li><code>afterAll</code>: any code in there will be executed after every test.</li> <li><code>after</code>: any code in there will be executed once, after running the last test.</li> </ul>","tags":["cypress","tests"]},{"location":"learning/cypress.html#commands-and-conquer-queries","title":"Commands (and conquer) &amp; queries","text":"<p>Commands &amp; queries are tools to import into Cypress core some actions you need to perform throughout your whole project (or a majority of files).</p> <p>Commands are re-usable shortcuts for complex command chains. Queries are synchronous, chainable retriable commands.</p> <p>Some relevant examples might be: - A command to login to the app before running tests. - A command to mock fetching current user data. - A command to mock any API call, which could reflect your API structure. - A query to get an element by its data-cy attribute, that would return the element</p>","tags":["cypress","tests"]},{"location":"learning/cypress.html#tasks","title":"Tasks","text":"<p>Tasks are functions that can be defined in Cypress config file &amp; then called inside tests or tests hooks. They are very useful if you need to run code that cannot be executed in a browser. They are useful to fake an third party API or a browser API.</p> <pre><code>// In your app code\nwindow.navigator.geolocation.getCurrentPosition(() =&gt; {});\n\n// In your Cypress test\ncy.visit('/').then((window) =&gt; {\n  cy.stub(window.navigator.geolocation, 'getCurrentPosition').as('getUserPosition')\n})\ncy.get('@getUserPosition').should('have.been.called');\n</code></pre>","tags":["cypress","tests"]},{"location":"learning/cypress.html#stubs","title":"Stubs","text":"<p>A stub is a replacement for an existing function/method. They're used for evaluating &amp; controlling function calls.</p>","tags":["cypress","tests"]},{"location":"learning/cypress.html#spies","title":"Spies","text":"<p>A spy is a Cypress tool that spies (with its little eye) a call of a specific function. It is useful when you want to make sure this function was indeed called, but when you don't need to fake its functioning (therefore when you don't need a stub)</p>","tags":["cypress","tests"]},{"location":"learning/cypress.html#manipulating-the-clock","title":"Manipulating the clock","text":"<p>Manipulating the clock allows us to fake the passing of time, because sometimes things happen after a delay and we don't want our test to actually wait.</p> <p>Example: <pre><code>cy.clock();\ncy.tick(2000); // Fake a 2 seconds delay\n</code></pre></p>","tags":["cypress","tests"]},{"location":"learning/cypress.html#interceptors","title":"Interceptors","text":"<p>Interceptors are a tool that cypress provides to intercept certain requests made during the tests. They're useful for: - Making sure the call was made. - Blocking the request by mocking its return value. - You need to test a behaviour (for example the display of a success or error message), but don't need to test what's under the hood.</p> <p>\ud83d\udea7 Intercepting will not necessarily block the request, to actually block it, you need to mock the result.</p> <p>Example :  <pre><code>// Either you don't need to block the call, just intercept it.\ncy.intercept('POST', 'https://newsletter.fnatic.com?*').as('subscribeNewsletter');\ncy.get('@subscribeNewsletter').should('have.been.called');\n\n// Or you want to block the call: mock the response\ncy.intercept('POST', 'https://newsletter.fnatic.com?*', {status: 201}).as('subscribeNewsletter');\n\n// In any case, if you need to wait for the response:\ncy.wait('@subscribeNewsletter');\n</code></pre></p>","tags":["cypress","tests"]},{"location":"learning/cypress.html#good-practices","title":"Good practices","text":"<ul> <li>Test cases names should be readable as a sentence: \"it should display pending tasks\" for example.</li> <li>Test cases should be isolated, they should not depend on the previous test &amp; should always have the same starting point (reset database for example).</li> <li>Fixtures should make sense and be reusable throughout tests.</li> <li>The clock should be used to avoid actually waiting for our delays to expire, we should not actually wait.</li> </ul>","tags":["cypress","tests"]},{"location":"learning/gcloud.gcp.html","title":"Gcloud.gcp","text":"<p>\ud83c\udfe1 Home &gt; Learning &gt; GCP</p>","tags":["gcp"]},{"location":"learning/gcloud.gcp.html#google-cloud-platform-gcloud","title":"\u2601\ufe0f Google Cloud Platform - GCloud","text":"","tags":["gcp"]},{"location":"learning/nestjs.html","title":"Nestjs","text":"<p>\ud83c\udfe1 Home &gt; Learning &gt; NestJs</p>","tags":["nest","nestjs"]},{"location":"learning/nestjs.html#nestjs","title":"\ud83e\udeba NestJs","text":"","tags":["nest","nestjs"]},{"location":"learning/nestjs.html#interceptors","title":"Interceptors","text":"<ul> <li>Interceptors can be used to intercept incoming or outgoing requests. They're the equivalent of Middlewares in other frameworks.</li> <li>They can be applied either on a controller level to a whole controller or just to some of its methods.</li> </ul>","tags":["nest","nestjs"]},{"location":"learning/nestjs.html#sources","title":"\ud83d\udcda\ufe0f Sources","text":"<ul> <li>Dedicated Udemy course on interceptors</li> </ul>","tags":["nest","nestjs"]},{"location":"learning/nestjs.html#decorators","title":"Decorators","text":"","tags":["nest","nestjs"]},{"location":"learning/nestjs.html#sources_1","title":"\ud83d\udcda\ufe0f Sources","text":"<ul> <li>Dedicated Udemy course on decorators</li> </ul>","tags":["nest","nestjs"]},{"location":"learning/nestjs.html#sources_2","title":"\ud83d\udcda\ufe0f Sources","text":"<ul> <li>Full Udemy course</li> </ul>","tags":["nest","nestjs"]},{"location":"learning/react.html","title":"React","text":"<p>\ud83c\udfe1 Home &gt; Learning &gt; ReactJs</p>","tags":["react"]},{"location":"learning/react.html#react","title":"\u269b\ufe0f React","text":"","tags":["react"]},{"location":"learning/react.html#react-fragments-or-empty-tags","title":"\ud83c\udf55 React fragments or empty tags","text":"<p>When we render a component, React expects all of our content to be contained in a single element (because behind the scene, when we use JSX, it uses the <code>createElement</code> method). As a matter of consequence, we need to add a wrapper, to contain our elements (like a <code>div</code> tag for example).</p> <p>But, most of the time, we don't want to create a wrapper just for this purpose, which is where React fragments come in. <code>&lt;React.Fragment&gt;</code> acts as a wrapper without creating unwanted tags in the DOM. The empty tags notation (<code>&lt;&gt;</code>) is just a shortcut to write these fragments.</p>","tags":["react"]},{"location":"learning/react.html#sources","title":"Sources","text":"<p>A medium article about that</p>","tags":["react"]},{"location":"learning/react.html#portals","title":"\ud83d\udfe0\ud83d\udd35 Portals","text":"<p>Portals are a way to render some children into a different part of the DOM.</p> <p>They are used to : - Render to a different part of the DOM. - Render a modal dialog inside a Modal component that can be displayed on the whole page with an overlay. - Render React components into non-React server markup - Render React components in non-React DOM nodes</p>","tags":["react"]},{"location":"learning/react.html#sources_1","title":"Sources","text":"<p>React.dev</p>","tags":["react"]},{"location":"learning/react.html#controlled-uncontrolled-components","title":"\ud83d\udec2 Controlled &amp; uncontrolled components","text":"<p>A controlled component is a component where the value &amp; changes to the value are not handled in the component itself but in its parent component. The parent component controls the child component.</p> <p>In a form, a component is controlled when its value &amp; changes are handled by a state, as opposed to the DOM (using <code>ref</code>). An uncontrolled component's value is not controlled by React but relies on the default behaviour of the DOM Element.</p>","tags":["react"]},{"location":"learning/react.html#stateless-stateful-components","title":"Stateless &amp; Stateful components","text":"<p>AKA: - Presentational vs stateful components - Dumb vs smart components</p>","tags":["react"]},{"location":"learning/react.html#sources_2","title":"Sources","text":"<p>Udemy course part 1</p> <p>Udemy course part 2</p> <p>Medium article about controlled components</p>","tags":["react"]},{"location":"learning/react.html#side-effects","title":"\ud83e\udd2e Side effects","text":"<p>Everything that is not about rendering UI or reacting to user input: - Store data - Send HTTP requests - Manage timers</p>","tags":["react"]},{"location":"learning/react.html#useeffect-hook","title":"UseEffect hook","text":"<pre><code>useEffect(myFunction, [dependencies]);\n</code></pre> <ul> <li><code>myFunction</code>: a function that will be executed AFTER every evaluation of the component IF the specified dependencies have changed</li> <li>You can return a function (which is called a Cleanup function), that will be executed BEFORE the function passed as argument runs (except for the very first time);</li> <li><code>[dependencies]</code>: array of dependencies. If it's empty, it will only be executed the very first time the component is evaluation.</li> </ul>","tags":["react"]},{"location":"learning/react.html#sources_3","title":"Sources","text":"<p>Udemy course part 1</p> <p>Udemy course part 2</p>","tags":["react"]},{"location":"learning/react.html#reducers","title":"\ud83e\udd0f Reducers","text":"","tags":["react"]},{"location":"learning/react.html#usereducer-hook","title":"UseReducer hook","text":"<p>It's an alternative to <code>useState</code> if we need a more powerful state management, for examples if some states depends on one another.</p> <pre><code>const [state, dispatchFunction] = useReducer(reducerFunction, initialState, initFunction);\n</code></pre> <ul> <li><code>state</code>: latest state snapshot</li> <li><code>dispatchFunction</code>: a function that will dispatch a new action, that will be consummed by <code>reductionFunction</code></li> <li><code>reductionFunction</code>: a function that gets the latest state snapshot &amp; the action dispatched &amp; returns an updated state.</li> <li><code>initialState</code>: the initial state</li> <li><code>initFunction</code>: an init function for the state in case it's complex</li> </ul>","tags":["react"]},{"location":"learning/react.html#sources_4","title":"Sources","text":"<p>Udemy course</p>","tags":["react"]},{"location":"learning/react.html#context","title":"\ud83d\udc5c Context","text":"<p>It is used when you forward state to multiple components, it can also be called store.</p>","tags":["react"]},{"location":"learning/react.html#create-your-context","title":"Create your context","text":"<pre><code>const DoctorContext = React.createContext({nb: 11, name: 'Matt Smith'});\n\nexport default DoctorContext;\n</code></pre>","tags":["react"]},{"location":"learning/react.html#provide-it-to-your-components","title":"Provide it to your components","text":"<p>In order to tap into a context, you'll need your context to wrap your components. Then it will be available in your components &amp; all their children.</p> <pre><code>const [currentDoctor, setCurrentDoctor] = useState();\n\n&lt;React.fragment&gt;\n  &lt;DoctorContext.Provider value={currentDoctor}&gt;\n    &lt;Header&gt;&lt;/Header&gt;\n    &lt;Body&gt;&lt;/Body&gt;\n    &lt;Footer&gt;&lt;/Footer&gt;\n  &lt;/DoctorContext.Provider&gt;\n&lt;/React.fragment&gt;\n</code></pre>","tags":["react"]},{"location":"learning/react.html#listen-to-it","title":"Listen to it","text":"","tags":["react"]},{"location":"learning/react.html#with-the-consumer","title":"With the consumer","text":"<p>Wrapping your components with the consumer will allow your components to tap into your context. They should be returned by the function used by your context.</p> <pre><code>// In parent\nreturn (\n  &lt;div&gt;\n    &lt;DoctorContext.Consumer&gt;\n      {(context) =&gt; {\n        return (\n          &lt;BestDoctorBanner&gt;&lt;/BestDoctorBanner&gt;\n          &lt;AllDoctors&gt;&lt;/AllDoctors&gt;\n        );\n      }}\n    &lt;/DoctorContext.Consumer&gt;\n  &lt;/div&gt;\n);\n\n// In child\nreturn (&lt;div&gt;Current doctor is #{context.nb} {context.name}&lt;/div&gt;);\n</code></pre>","tags":["react"]},{"location":"learning/react.html#with-a-hook","title":"With a hook","text":"<ul> <li>Remove the consumer &amp; use the <code>useContext()</code> hook.</li> </ul> <pre><code>const DoctorContext = React.createContext({nb: 11, name: 'Matt Smith'});\n\nexport default DoctorContext;\n</code></pre> <pre><code>const [currentDoctor, setCurrentDoctor] = useState();\nconst onRegeneration = () =&gt; {\n  const doctors = [\n    { nb: 9, name: 'Christopher Eccleston'},\n    { nb: 10, name: 'David Tennant'},\n    { nb: 11, name: 'Matt Smith'},\n    { nb: 12, name: 'Peter Capaldi'},\n    { nb: 13, name: 'Joddie Whittaker'},\n    { nb: 14, name: 'Ncuti Gatwa'},\n  ];\n\n  const newDoctor = doctors.find((doctor) =&gt; doctor.nb === currentDoctor.nb +1);\n\n  setCurrentDoctor(newDoctor);\n};\n\n&lt;React.fragment&gt;\n  &lt;DoctorContext.Provider value={{currentDoctor, onRegeneration}&gt;\n    &lt;Header&gt;&lt;/Header&gt;\n    &lt;Body&gt;&lt;/Body&gt;\n    &lt;Footer&gt;&lt;/Footer&gt;\n  &lt;/DoctorContext.Provider&gt;\n&lt;/React.fragment&gt;\n</code></pre> <pre><code>// In parent\nreturn (\n  &lt;div&gt;\n    {(context) =&gt; {\n      return (\n        &lt;BestDoctorBanner&gt;&lt;/BestDoctorBanner&gt;\n        &lt;AllDoctors&gt;&lt;/AllDoctors&gt;\n      );\n    }}\n  &lt;/div&gt;\n);\n\n// In child\nimport React, { useContext } from 'react';\nimport DoctorContext from '../../store/doctor-context';\n\nconst context = useContext(DoctorContext);\n\nreturn (&lt;div&gt;\n  Current doctor is #{context.nb} {context.name}\n  &lt;Button onClick={context.onRegeneration()}&gt;I don't want to go&lt;/Button&gt;\n&lt;/div&gt;);\n</code></pre>","tags":["react"]},{"location":"learning/react.html#sources_5","title":"Sources","text":"<p>Udemy course</p>","tags":["react"]},{"location":"learning/react.html#fetch-data","title":"\ud83d\udc15 Fetch data","text":"<p>In order to fetch data, we can either use <code>fetch()</code>, which is provided by any browser, or use the <code>axios</code> bundle.</p>","tags":["react"]},{"location":"learning/react.html#sources_6","title":"Sources","text":"<p>Udemy course part 1</p>","tags":["react"]},{"location":"learning/react.html#sources_7","title":"\ud83d\udcda\ufe0f Sources","text":"<ul> <li>Udemy react course</li> </ul>","tags":["react"]},{"location":"tips/index.html","title":"\ud83e\udd13 Tips","text":"<p>\ud83c\udfe1 Home &gt; Tips</p>"},{"location":"tips/index.html#tips","title":"\ud83e\udd13 Tips","text":"<ul> <li>Free resources</li> </ul>"},{"location":"watch/index.html","title":"\u2694\ufe0f Watch","text":"<p>\ud83c\udfe1 Home &gt; Watch</p>"},{"location":"watch/index.html#now-my-watch-begins","title":"\u2694\ufe0f Now my watch begins","text":""},{"location":"watch/index.html#react","title":"\u269b\ufe0f React","text":"<ul> <li>Dynamic imports</li> <li>Why we can't use indexes as keys</li> <li>Stop controlling every form</li> <li>10 common mistakes React developers make</li> <li>10 JS mistakes even senior developers make</li> <li>How to optimize React</li> <li>3 rules to follow in React components</li> <li>React 19 &amp; memoization</li> <li>Custom hooks in react</li> </ul>"},{"location":"watch/index.html#design-patterns","title":"Design patterns","text":"<ul> <li>The render prop</li> <li>Compound components</li> <li>Container/presenter, HOC, Render props, Compound Components, Custom hooks</li> </ul>"},{"location":"watch/index.html#nextjs","title":"NextJs","text":"<ul> <li>Difference between Layouts &amp; Templates</li> </ul>"},{"location":"watch/index.html#tests","title":"\ud83e\udd1eTests","text":"<ul> <li>Cypress best practices</li> </ul>"},{"location":"watch/index.html#ui","title":"\ud83c\udfa8 UI","text":"<ul> <li>Icon design trends for 2024</li> <li>Dark patterns &amp; why the Indian Government banned them</li> <li>It's all 'bout the buttons</li> </ul>"},{"location":"watch/index.html#ux","title":"\ud83c\udf7f UX","text":"<ul> <li>Disabled buttons are baaaad, mkay ?</li> <li>How to cleverly display data (avoid field -&gt; value hell)</li> <li>How to design user friendly forms</li> <li>Best practices for Dropdown menus</li> </ul>"},{"location":"watch/index.html#js","title":"\ud83c\udf75 JS","text":"<ul> <li>9 powerful features of ES2024</li> <li>Difference between || and ?? in js</li> <li>The ?= operator</li> <li>ts-pattern examples</li> <li>Better JS understanding</li> <li>Tyescript Interfaces vs Types</li> </ul>"},{"location":"watch/index.html#css","title":"\ud83d\udc84CSS","text":"<ul> <li>CSS tricks to avoid JS in menus, tabs &amp; snap blocks</li> <li>10 CSS tricks</li> <li>Modern viewport units</li> <li>The :has selector</li> </ul>"},{"location":"watch/index.html#good-old-html","title":"\ud83c\udff7\ufe0f Good old html","text":"<ul> <li>A complete guide to shadow DOM</li> </ul>"},{"location":"watch/index.html#cse","title":"\u270a CSE (\ud83c\uddeb\ud83c\uddf7)","text":"<ul> <li>Actionnariat salari\u00e9</li> <li>Actionnariat salari\u00e9</li> </ul>"},{"location":"watch/index.html#misc","title":"\ud83c\udf55 Misc","text":"<ul> <li>A great article about CORS</li> <li>Stop testing your code</li> <li>Mock new Date() with jest</li> <li>JWT pros &amp; cons</li> <li>HTML blocking attribute</li> <li>Rare HTMl tags</li> </ul>"},{"location":"watch/index.html#todo","title":"\u2705 Todo","text":"<ul> <li>Test postman &amp; versionning des branches</li> <li>Scumban</li> <li>DORA</li> <li>SAFe</li> <li>TypeScript</li> <li>Kafka</li> </ul>"}]}